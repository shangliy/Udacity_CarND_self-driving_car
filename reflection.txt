# self-driving_car
Therea are challenges in this problem. First one is there are 'noisy' information which may disturb the detection of lines. The second one is that sometimes we will missing information which would cause the interrupt of the process. We can not just modify parameters of canny and hough to make it work. Because when we want more information, it comes with the 'noisy'. Meanwhile, when we want remove these bad lines, we will take risk of losing important lines. Thus, I think we need other methods to solve the dilemma and what I have done are focus on these two problems.

Considering the noisy information, I choose to use two self-adaptive windows to detect left and right lines separately. For the first frame, I initialize two windows with high confidence detecting the correct  lines. Then, I use the two lines to generate two new windows with much smalled width(20 in my case). Thus, considering I use the average value in the window. It remove most non-relative information and keep the important lines;

For the missing lines, I choose to save the slope and average center points of each frame. Sum them up and get the average value. If the information of one frame are unable to detect lines. I will use previous results and simulate lines within this frame. The reason to use avearge is to do low pass filter on the slope. It come as PCA control but with less sensitive to the big change. If we have the car speed information, we can use the speed as parameter to optimize. When the speed is slow, we add higher weight on previous results to make it stable, while the speed is fast, we need to add weight on difference of two frame wo make it react faster.
